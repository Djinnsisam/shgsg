--// Modules
local mercury = loadstring(game:HttpGet("https://raw.githubusercontent.com/Anxienvy/Roblox/main/Mercury%20UI%20Library.lua"))()

--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")

--// Variables
local localPlayer = Players.LocalPlayer
local pickaxeData = {}
local cycledOres = {}

local previousLocation = Players.LocalPlayer.Character:GetPivot()
local threadGui = nil
_G.config = _G.config or {
    enabled = false
}

_G.ores = _G.ores or {{"Lead", false}, {"Iron", false}, {"Crystal", false}, {"Gold", false}, {"Diamond", false}, {"Cobalt", false}, {"Oureclassium", false}, {"Viridis", false}, {"Tungsten", false}, {"Titanium", false}, {"Mithril", false}, {"Adamantine", false}, {"Titanstone", false}, {"Astral Silver", false}, {"Irradium", false}, {"Uranium", false}, {"Plutonium", false}, {"Aurium", false}, {"Duranite", false}, {"Lanite", false}, {"Gemstone Of Purity", false}, {"Gemstone Of Hatred", false}, {"Purite", false}, {"Hatrite", false}, {"Hevenite", false}, {"Hellite", false}, {"Moonstone", false}, {"Forbidden Crystal", false}}
_G.gui = nil

local childAdded = nil
childAdded = CoreGui.ChildAdded:Connect(function(child)
    if child:IsA("ScreenGui") and child.Name == "ScreenGui" then
        threadGui = child
        _G.gui = child
    end
    childAdded:Disconnect()
end)

--// UI Setup
local gui = mercury:Create{
    Name = "Mercury",
    Size = UDim2.fromOffset(600, 400),
    Theme = mercury.Themes.Dark,
    Link = "https://github.com/deeeity/mercury-lib"
}

local farm = gui:Tab{
	Name = "Auto Mine",
	Icon = "rbxassetid://6022668883"
}

farm:Toggle_Dropdown{
    Name = "Ore List",
    StartingText = "",
    Description = "Select any ore below to whitelist it",
    Items = _G.ores,
    Callback = function(item, state)
        for _, v in ipairs(_G.ores) do
            if v[1] == item then
                v[2] = state
                break
            end
        end
    end
}

farm:Toggle{
	Name = "Enable Auto Mine",
	StartingState = _G.config.enabled,
	Description = nil,
	Callback = function(state)
        if state == true then
            previousLocation = localPlayer.Character:GetPivot()
        else
            if #pickaxeData > 0 then
                local pickaxe = localPlayer.Backpack:FindFirstChild("PickaxeControl", true).Parent or localPlayer.Character:FindFirstChild("PickaxeControl", true).Parent
                if pickaxe.Head.Size ~= Vector3.new(100, 100, 100) or pickaxe.Head.Transparency < 1 or pickaxe.Head.MeshId ~= "" then
                    pickaxe.Head.Size = pickaxeData.Size
                    pickaxe.Head.Transparency = pickaxeData.Transparency
                    pickaxe.Head.MeshId = pickaxeData.MeshId
                end
            end

            if #_G.ores.selected > 0 then
                localPlayer.Character:PivotTo(previousLocation)
            end
        end
        _G.config.enabled = state
    end
}

if game.PlaceId == 8829364740 then
    local clicked = false

    farm:Button{
        Name = "Teleport to The Beneath",
        Description = nil,
        Callback = function()
            workspace.Map.BeneathTeleporter.RemoteFunction:InvokeServer("Confirm")

            if clicked == false then
                gui:Notification{
                    Title = "Notification",
                    Text = "Please wait...",
                    Duration = 6,
                    Callback = function() end
                }
            end
            clicked = true
        end
    }
end

--// Main
if ReplicatedStorage:FindFirstChild("FakeOres") == nil then
    local fakeOres = Instance.new("Folder")
    fakeOres.Parent = ReplicatedStorage
    fakeOres.Name = "FakeOres"
end

for _, ore in ipairs(workspace.Map.Ores:GetChildren()) do
    local param = RaycastParams.new()
    param.FilterDescendantsInstances = { ore }
    param.FilterType = Enum.RaycastFilterType.Blacklist

    local result = workspace:Raycast(ore:GetPivot().Position, ore:GetPivot().UpVector * 100000, param)
    if result == nil then
        ore.Parent = ReplicatedStorage.FakeOres
    end
end

while threadGui == _G.gui and threadGui ~= nil do
    RunService.Heartbeat:Wait()

    if _G.config.enabled == true then
        local ore = nil
        for _, v in ipairs(_G.ores) do
            if v[2] == true and table.find(cycledOres, v[1]) == nil then
                ore = v[1]
                break
            end
            RunService.Heartbeat:Wait()
        end

        if ore == nil then
            cycledOres = {}
            continue
        end

        local oreModel = nil
        for _, v in ipairs(workspace.Map.Ores:GetChildren()) do
            if v.Name == ore and v:FindFirstChild("Properties") ~= nil and v.Properties.Hitpoint.Value > 0 then
                oreModel = v
                break
            end
        end

        if oreModel ~= nil then
            local heartbeat = nil
            heartbeat = RunService.Heartbeat:Connect(function()
                if oreModel ~= nil and oreModel:FindFirstChild("Mineral") ~= nil then
                    localPlayer.Character:PivotTo((oreModel.Mineral.CFrame + oreModel.Mineral.CFrame.LookVector * -1) - Vector3.new(0, 4, 0))
                end
            end)

            while _G.config.enabled == true and oreModel:FindFirstChild("Properties") ~= nil and oreModel.Properties.Hitpoint.Value > 0 do
                if localPlayer:FindFirstChild("Backpack") == nil or localPlayer.Character == nil then
                    return
                end

                local pickaxe = localPlayer.Backpack:FindFirstChild("PickaxeControl", true) or localPlayer.Character:FindFirstChild("PickaxeControl", true)
                if pickaxe ~= nil then
                    pickaxe = pickaxe.Parent

                    if pickaxe:FindFirstChild("FakeHead") == nil then
                        local clone = pickaxe.Head:Clone()
                        clone.Name = "FakeHead"
                        clone.Parent = pickaxe
                    end

                    if pickaxe.Handle:FindFirstChild("FakeWeldConstraint") == nil then
                        local weldConstraint = Instance.new("WeldConstraint")
                        weldConstraint.Parent = pickaxe.Handle
                        weldConstraint.Name = "FakeWeldConstraint"
                        weldConstraint.Part0 = pickaxe.Handle
                        weldConstraint.Part1 = pickaxe.FakeHead
                    end

                    if pickaxe.Head.Size ~= Vector3.new(100, 100, 100) or pickaxe.Head.Transparency < 1 or pickaxe.Head.MeshId ~= "" then
                        pickaxeData.Size = pickaxe.Head.Size
                        pickaxeData.Transparency = pickaxe.Head.Transparency
                        pickaxeData.MeshId = pickaxe.Head.MeshId

                        pickaxe.Head.Size = Vector3.new(100, 100, 100)
                        pickaxe.Head.Transparency = 1
                        pickaxe.Head.MeshId = ""
                    end
                    pickaxe.Parent = localPlayer.Character
                    pickaxe:Activate()
                end
                RunService.Heartbeat:Wait()
            end
            heartbeat:Disconnect()
        end
        table.insert(cycledOres, ore)
    end
end
localPlayer.Character:PivotTo(previousLocation)

if #pickaxeData > 0 then
    local pickaxe = localPlayer.Backpack:FindFirstChild("PickaxeControl", true).Parent or localPlayer.Character:FindFirstChild("PickaxeControl", true).Parent
    if pickaxe.Head.Size ~= Vector3.new(100, 100, 100) or pickaxe.Head.Transparency < 1 or pickaxe.Head.MeshId ~= "" then
        pickaxe.Head.Size = pickaxeData.Size
        pickaxe.Head.Transparency = pickaxeData.Transparency
        pickaxe.Head.MeshId = pickaxeData.MeshId

        pickaxe.FakeHead:Destroy()
        pickaxe.Handle.FakeWeldConstraint:Destroy()
    end
end
